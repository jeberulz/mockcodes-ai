---
description: Apply these rules when making changes to the project
globs:
alwaysApply: true
---

Update this rule if user requested changes to the project requirement, etc.
# Security Guidelines for Mockcodes

This document outlines security best practices and requirements for **Mockcodes**, a micro-SaaS platform that transforms UI screenshots into HTML/CSS/JS projects using AI. These guidelines are organized by domain and designed to be applied throughout design, development, deployment, and operations. Adherence to these controls ensures Mockcodes remains robust against common threats and maintains user trust.

## 1. Authentication & Access Control

### 1.1. Robust Authentication

*   Use **Supabase Auth** with **Clerk** for user sign-up/sign-in flows. Enforce email verification before granting access.
*   Enforce strong password policy (minimum 12 characters, mixed case, digits, symbols).
*   Hash passwords using **Argon2** or **bcrypt** with unique salts.
*   Rate-limit login attempts (e.g., 5 attempts per 15 minutes) to mitigate brute-force attacks.

### 1.2. Session & Token Security

*   Use **Secure**, **HttpOnly**, and **SameSite=Strict** cookies for session tokens.
*   Implement short-lived JWTs (max 60m) with refresh tokens stored securely.
*   Revoke tokens on logout, password change, or suspicious activity.
*   Validate JWT `iss`, `aud`, and `exp` fields on every request.

### 1.3. Role-Based Access Control (RBAC)

*   Define two roles: `user` and `admin`.
*   Enforce server-side authorization checks on every protected endpoint.
*   Deny-by-default for any operation not explicitly permitted.
*   Store role claims in JWT and re-verify against Supabase on sensitive operations.

### 1.4. Multi-Factor Authentication (MFA)

*   Offer TOTP-based MFA for high-value admin accounts.
*   Enforce MFA enrollment for admin sign-on.

## 2. Input Handling & Processing

### 2.1. File Upload Security

*   Accept only `.png` and `.jpg/jpeg` up to **5 MB**.
*   Validate content type server-side (MIME sniffing) and file signature.
*   Store uploads in Supabase Storage outside the webroot.
*   Generate randomized filenames; reject filenames containing `../` or special characters.
*   Scan uploads for malware (e.g., ClamAV) if possible.

### 2.2. Prevent Injection Attacks

*   Use Supabase’s parameterized queries or an ORM (e.g., Prisma) to prevent SQL injection.
*   Sanitize all user-supplied strings before interpolation.
*   Escape any variables in server-side templates.

### 2.3. Cross-Site Scripting (XSS)

*   Escape & HTML-encode user content in React components (Next.js provides automatic escaping in JSX).
*   Purge or whitelist allowed HTML if rich text is used (e.g., DOMPurify).
*   Employ a strict **Content-Security-Policy** to restrict script sources.

### 2.4. Redirects & Forwards

*   Maintain an allow-list of redirect URLs.
*   Validate any `redirectTo` parameters against this list to prevent open-redirects.

## 3. Data Protection & Privacy

### 3.1. Encrypt Data in Transit & at Rest

*   Enforce HTTPS (TLS 1.2+) for all client-server and server-agent communications.
*   Enable TLS on Supabase connections and Docker-hosted AI agent endpoints.
*   Encrypt database volumes and storage buckets at rest.

### 3.2. Secrets Management

*   Store API keys, DB credentials, and Stripe secrets in Vercel environment variables or a secrets manager (e.g., AWS Secrets Manager).
*   Never commit secrets to Git. Use a `.env.local` for local development and `.env.production` for production.

### 3.3. Sensitive Data Handling

*   Mask or omit PII (email) in logs and error messages.
*   Do not log raw JWTs or API keys. Sanitize logs using structured logging frameworks.
*   Comply with GDPR: provide data export and deletion endpoints for user data.

## 4. API & Service Security

### 4.1. HTTPS & CORS

*   Enforce HTTPS for all Next.js API routes and webhooks.
*   Configure CORS to allow only the primary domain (`https://mockcodes.com`) and authorized subdomains.

### 4.2. Rate Limiting & Throttling

*   Apply IP-based rate limits on critical endpoints (login, screenshot upload, prompt generation).
*   Use a CDN or API gateway (e.g., Vercel Edge Middleware) for global rate limiting.

### 4.3. Input Validation

*   Validate JSON payloads against strict schemas (e.g., Zod) server-side.
*   Reject requests with extra or missing fields; return 400 Bad Request.

### 4.4. API Versioning & Methods

*   Prefix API routes with `/api/v1/` for initial version.
*   Use appropriate HTTP methods: GET for reads, POST for creations, PUT/PATCH for updates, DELETE for removals.

### 4.5. Minimize Data Exposure

*   Return only fields required by the client (use projection in queries).
*   Strip internal metadata (e.g., raw DB IDs) from responses.

## 5. Web Application Security Hygiene

### 5.1. CSRF Protection

*   For state-changing requests (POST/PUT/DELETE), use **sameSite=Strict** cookies or anti-CSRF tokens (e.g., `csrf` cookie + header).
*   Next.js built-in CSRF middleware can be leveraged.

### 5.2. Security Headers

*   Implement the following HTTP headers via Next.js `headers()` config:

    *   **Strict-Transport-Security:** `max-age=63072000; includeSubDomains; preload`
    *   **X-Content-Type-Options:** `nosniff`
    *   **X-Frame-Options:** `DENY`
    *   **Referrer-Policy:** `strict-origin-when-cross-origin`
    *   **Content-Security-Policy:** restrict scripts/styles to self and trusted CDNs.

### 5.3. Secure Cookies

*   Set **Secure**, **HttpOnly**, **SameSite=Strict** on all session and refresh cookies.

### 5.4. Clickjacking & SRI

*   Use `X-Frame-Options: DENY`.
*   Apply Subresource Integrity on any third-party scripts or styles.

## 6. Infrastructure & Configuration Management

### 6.1. Server Hardening

*   Disable unused ports and services on AI agent hosts.
*   Use firewalls or security groups to restrict access to Docker-hosted agents.

### 6.2. TLS/SSL Configuration

*   Use only TLS 1.2+ and strong cipher suites.
*   Regularly renew and monitor certificates (automate with Let’s Encrypt or Vercel’s managed TLS).

### 6.3. Principle of Least Privilege

*   Grant Supabase DB user only necessary CRUD rights.
*   Restrict Stripe webhook secret to only payment-related endpoints.

### 6.4. Software Updates & Patch Management

*   Keep Next.js, Node.js, dependencies, and Docker images up to date.
*   Automate vulnerability scanning (e.g., Dependabot, Snyk).

### 6.5. Disable Debug in Production

*   Ensure `NODE_ENV=production` on Vercel.
*   Remove or guard any debug endpoints or verbose stack traces.

## 7. Dependency Management

*   Maintain a lockfile (`package-lock.json`) to guarantee reproducible installs.
*   Vet third-party packages: prefer widely adopted, actively maintained libraries.
*   Schedule regular SCA scans (e.g., GitHub Dependabot alerts).
*   Remove unused dependencies to reduce attack surface.

## 8. CI/CD & DevOps Security

*   Use Vercel’s Git-based CI/CD with branch protection rules.
*   Require pull-request reviews before merging to `main`.
*   Store secrets in Vercel’s encrypted environment variables.
*   Run automated tests and security linting (ESLint, npm audit) on every build.
*   Implement infrastructure as code for AI agent provisioning (e.g., Terraform, Docker Compose).

## 9. Monitoring, Logging & Incident Response

*   Centralize logs (e.g., Logflare, Datadog) with structured, redacted output.
*   Monitor error rates, latency spikes, and unauthorized access attempts.
*   Implement alerting for anomalies (e.g., failed logins, high rate-limit events).
*   Document an incident response plan outlining escalation, containment, remediation, and user notification steps.

## 10. Compliance & Privacy

*   Adhere to GDPR: provide data export/deletion endpoints, update privacy policy.
*   Maintain a data retention policy: archive or purge inactive projects after a defined period.
*   Ensure Stripe integration remains PCI-compliant by never handling raw card data directly.

By implementing these security guidelines, the Mockcodes platform will uphold best practices across authentication, data protection, application security, infrastructure hardening, and operational processes. Regular reviews and audits should be performed to adapt controls to evolving threats and compliance requirements.
