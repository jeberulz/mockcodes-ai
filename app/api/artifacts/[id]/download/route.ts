import { NextRequest, NextResponse } from 'next/server'
import { auth } from '@clerk/nextjs/server'
import { createClient } from '@supabase/supabase-js'
import JSZip from 'jszip'

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    // Check authentication
    const { userId } = await auth()
    if (!userId) {
      return NextResponse.json({ error: 'Authentication required' }, { status: 401 })
    }

    const projectId = params.id
    
    if (!projectId) {
      return NextResponse.json({ error: 'Project ID is required' }, { status: 400 })
    }

    // Initialize Supabase client with service role
    const supabase = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.SUPABASE_SERVICE_ROLE_KEY!
    )

    // Verify project ownership and get project details
    const { data: project, error: projectError } = await supabase
      .from('projects')
      .select('id, user_id, name, description')
      .eq('id', projectId)
      .eq('user_id', userId)
      .single()

    if (projectError || !project) {
      return NextResponse.json({ error: 'Project not found' }, { status: 404 })
    }

    // Fetch the latest artifact for this project
    const { data: artifact, error: artifactError } = await supabase
      .from('artifacts')
      .select('*')
      .eq('project_id', projectId)
      .order('created_at', { ascending: false })
      .limit(1)
      .single()

    if (artifactError || !artifact) {
      return NextResponse.json({ error: 'No artifacts found for this project' }, { status: 404 })
    }

    // Create ZIP file
    const zip = new JSZip()

    // Add HTML file
    zip.file('index.html', artifact.html_content)

    // Add CSS file
    zip.file('styles.css', artifact.css_content)

    // Add JavaScript file
    zip.file('script.js', artifact.js_content)

    // Add README file
    const readme = `# ${project.name}

${project.description || 'Generated by MockCodes AI'}

## Getting Started

1. Open \`index.html\` in your browser to view the project
2. Modify \`styles.css\` to customize the styling
3. Edit \`script.js\` to add interactive functionality

## Files Included

- \`index.html\` - Main HTML structure
- \`styles.css\` - Tailwind CSS styling
- \`script.js\` - JavaScript functionality
- \`package.json\` - Project dependencies (if needed)

## Development

For development with a modern framework:

1. Create a new Next.js project:
   \`\`\`bash
   npx create-next-app@latest my-project --typescript --tailwind --eslint
   \`\`\`

2. Copy the HTML content to your page components
3. Add the CSS to your global styles
4. Convert JavaScript to React components as needed

Generated on: ${new Date(artifact.created_at).toLocaleString()}
`

    zip.file('README.md', readme)

    // Add package.json if there are any dependencies
    const packageJson = {
      name: project.name.toLowerCase().replace(/\s+/g, '-'),
      version: '1.0.0',
      description: project.description || 'Generated by MockCodes AI',
      main: 'index.html',
      scripts: {
        start: 'npx serve .',
        dev: 'npx serve . --live-reload'
      },
      devDependencies: {
        serve: '^14.0.0'
      }
    }

    zip.file('package.json', JSON.stringify(packageJson, null, 2))

    // Generate ZIP buffer
    const zipBuffer = await zip.generateAsync({ type: 'nodebuffer' })

    // Return ZIP file
    return new NextResponse(zipBuffer, {
      headers: {
        'Content-Type': 'application/zip',
        'Content-Disposition': `attachment; filename="${project.name.replace(/\s+/g, '-')}.zip"`
      }
    })

  } catch (error) {
    console.error('Download API error:', error)
    return NextResponse.json(
      { error: 'Failed to generate download' }, 
      { status: 500 }
    )
  }
}